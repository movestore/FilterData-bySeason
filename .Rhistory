(years=='ALL')
library(jsonlite)
source("logger.R")
source("RFunction.R")
inputFileName = "input_lowres_geese_74X.rds" #important to set to NULL for movebank-download
outputFileName = "output.rds"
args <- list()
#################################################################
########################### Arguments ###########################
# The data parameter will be added automatically if input data is available
# The name of the field in the vector must be exaclty the same as in the r function signature
# Example:
# rFunction = function(username, password)
# The paramter must look like:
#    args[["username"]] = "any-username"
#    args[["password"]] = "any-password"
# Add your arguments of your r function here
args[["startTimestamp"]] = NULL
args[["endTimestamp"]] = NULL
args[["years"]] <- 'ALL'
#################################################################
#################################################################
inputData <- NULL
if(!is.null(inputFileName) && inputFileName != "" && file.exists(inputFileName)) {
cat("Loading file from", inputFileName, "\n")
inputData <- readRDS(file = inputFileName)
} else {
cat("Skip loading: no input File", "\n")
}
# Add the data paramter if input data is available
if (!is.null(inputData)) {
args[["data"]] <- inputData
}
result <- tryCatch({
do.call(rFunction, args)
},
error = function(e) { #if in RFunction.R some error are silenced, they come back here and break the app... (?)
print(paste("ERROR: ", e))
stop(e) # re-throw the exception
}
)
if(!is.null(outputFileName) && outputFileName != "" && !is.null(result)) {
cat("Storing file to", outputFileName, "\n")
saveRDS(result, file = outputFileName)
} else {
cat("Skip store result: no output File or result is missing", "\n")
}
data <- inputData
startTimestamp <- endTimestamp <- NULL
years <- 'ALL'
Sys.setenv(tz="GMT")
if (years=='ALL')
{
years.vec <- unique(as.POSIXlt(timestamps(data),tz="GMT")$year+1900)
logger.info(paste0("You have selected all years of the data set: ",paste(years.vec,collapse=", ")))
} else
{
years.vec <- as.numeric(strsplit(years,",")[[1]])
logger.info(paste("You have selected to filter for the following years:",paste(years.vec,collapse=", ")))
}
require('move')
require('foreach')
if (years=='ALL')
{
years.vec <- unique(as.POSIXlt(timestamps(data),tz="GMT")$year+1900)
logger.info(paste0("You have selected all years of the data set: ",paste(years.vec,collapse=", ")))
} else
{
years.vec <- as.numeric(strsplit(years,",")[[1]])
logger.info(paste("You have selected to filter for the following years:",paste(years.vec,collapse=", ")))
}
is.null(startTimestamp)
logger.info("You did not provide a start and/or end timestamp. So it is not possible to filter for a season. The whole data set of the selected years (default ALL) is returned.")
timestamps(data)
as.POSIXlt(timestamps(data))$year+1900
as.POSIXlt(timestamps(data))$year+1900 %in% years.vec
years.vec
which((as.POSIXlt(timestamps(data))$year+1900) %in% years.vec)
length(data)
years <- c(2013)
if (years=='ALL')
{
years.vec <- unique(as.POSIXlt(timestamps(data),tz="GMT")$year+1900)
logger.info(paste0("You have selected all years of the data set: ",paste(years.vec,collapse=", ")))
} else
{
years.vec <- as.numeric(strsplit(years,",")[[1]])
logger.info(paste("You have selected to filter for the following years:",paste(years.vec,collapse=", ")))
}
years.vec <- as.numeric(strsplit(years,",")[[1]])
years <- "2013"
years.vec <- as.numeric(strsplit(years,",")[[1]])
logger.info(paste("You have selected to filter for the following years:",paste(years.vec,collapse=", ")))
which((as.POSIXlt(timestamps(data))$year+1900) %in% years.vec)
data[which((as.POSIXlt(timestamps(data))$year+1900) %in% years.vec),]
library(jsonlite)
source("logger.R")
source("RFunction.R")
inputFileName = "input_lowres_geese_74X.rds" #important to set to NULL for movebank-download
outputFileName = "output.rds"
args <- list()
#################################################################
########################### Arguments ###########################
# The data parameter will be added automatically if input data is available
# The name of the field in the vector must be exaclty the same as in the r function signature
# Example:
# rFunction = function(username, password)
# The paramter must look like:
#    args[["username"]] = "any-username"
#    args[["password"]] = "any-password"
# Add your arguments of your r function here
args[["startTimestamp"]] = NULL
args[["endTimestamp"]] = NULL
args[["years"]] <- 'ALL'
#################################################################
#################################################################
inputData <- NULL
if(!is.null(inputFileName) && inputFileName != "" && file.exists(inputFileName)) {
cat("Loading file from", inputFileName, "\n")
inputData <- readRDS(file = inputFileName)
} else {
cat("Skip loading: no input File", "\n")
}
# Add the data paramter if input data is available
if (!is.null(inputData)) {
args[["data"]] <- inputData
}
result <- tryCatch({
do.call(rFunction, args)
},
error = function(e) { #if in RFunction.R some error are silenced, they come back here and break the app... (?)
print(paste("ERROR: ", e))
stop(e) # re-throw the exception
}
)
if(!is.null(outputFileName) && outputFileName != "" && !is.null(result)) {
cat("Storing file to", outputFileName, "\n")
saveRDS(result, file = outputFileName)
} else {
cat("Skip store result: no output File or result is missing", "\n")
}
result
years
library(jsonlite)
source("logger.R")
source("RFunction.R")
inputFileName = "input_lowres_geese_74X.rds" #important to set to NULL for movebank-download
outputFileName = "output.rds"
args <- list()
#################################################################
########################### Arguments ###########################
# The data parameter will be added automatically if input data is available
# The name of the field in the vector must be exaclty the same as in the r function signature
# Example:
# rFunction = function(username, password)
# The paramter must look like:
#    args[["username"]] = "any-username"
#    args[["password"]] = "any-password"
# Add your arguments of your r function here
args[["startTimestamp"]] = "2020-01-15"
args[["endTimestamp"]] = "2020-05-01"
args[["years"]] <- 'ALL'
#################################################################
#################################################################
inputData <- NULL
if(!is.null(inputFileName) && inputFileName != "" && file.exists(inputFileName)) {
cat("Loading file from", inputFileName, "\n")
inputData <- readRDS(file = inputFileName)
} else {
cat("Skip loading: no input File", "\n")
}
# Add the data paramter if input data is available
if (!is.null(inputData)) {
args[["data"]] <- inputData
}
result <- tryCatch({
do.call(rFunction, args)
},
error = function(e) { #if in RFunction.R some error are silenced, they come back here and break the app... (?)
print(paste("ERROR: ", e))
stop(e) # re-throw the exception
}
)
if(!is.null(outputFileName) && outputFileName != "" && !is.null(result)) {
cat("Storing file to", outputFileName, "\n")
saveRDS(result, file = outputFileName)
} else {
cat("Skip store result: no output File or result is missing", "\n")
}
result
split(result)
library(jsonlite)
source("logger.R")
source("RFunction.R")
inputFileName = "input_longfar_stork_prinzesschen.rds" #important to set to NULL for movebank-download
outputFileName = "output.rds"
args <- list()
#################################################################
########################### Arguments ###########################
# The data parameter will be added automatically if input data is available
# The name of the field in the vector must be exaclty the same as in the r function signature
# Example:
# rFunction = function(username, password)
# The paramter must look like:
#    args[["username"]] = "any-username"
#    args[["password"]] = "any-password"
# Add your arguments of your R function here
args[["startTimestamp"]] = "2020-01-15"
args[["endTimestamp"]] = "2020-05-01"
args[["years"]] <- 'ALL'
#################################################################
#################################################################
inputData <- NULL
if(!is.null(inputFileName) && inputFileName != "" && file.exists(inputFileName)) {
cat("Loading file from", inputFileName, "\n")
inputData <- readRDS(file = inputFileName)
} else {
cat("Skip loading: no input File", "\n")
}
# Add the data paramter if input data is available
if (!is.null(inputData)) {
args[["data"]] <- inputData
}
result <- tryCatch({
do.call(rFunction, args)
},
error = function(e) { #if in RFunction.R some error are silenced, they come back here and break the app... (?)
print(paste("ERROR: ", e))
stop(e) # re-throw the exception
}
)
if(!is.null(outputFileName) && outputFileName != "" && !is.null(result)) {
cat("Storing file to", outputFileName, "\n")
saveRDS(result, file = outputFileName)
} else {
cat("Skip store result: no output File or result is missing", "\n")
}
result
library(move)
crs("+lonlat")
crs("+longlat")
help(crs)
is.crs(crs("+longlat"))
